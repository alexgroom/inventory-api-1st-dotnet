/*
 * Inventory API v2
 *
 * Inventory API for the Cloud Native Workshop
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using System.ComponentModel.DataAnnotations;
using Coolstore.Inventory.Attributes;
using Coolstore.Inventory.Models;
using Newtonsoft.Json;

namespace Coolstore.Inventory.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    public class DefaultApiController : ControllerBase
    { 

        private static string exampleJson = "[{\"itemId\":\"329299\",\"quantity\":35},{\"itemId\":\"329199\",\"quantity\":12},{\"itemId\":\"165613\",\"quantity\":45},{\"itemId\":\"165614\",\"quantity\":87},{\"itemId\":\"165954\",\"quantity\":43},{\"itemId\":\"444434\",\"quantity\":32},{\"itemId\":\"444435\",\"quantity\":53}]";
        private static List<InventoryItem> exampleList = JsonConvert.DeserializeObject<List<InventoryItem>>(exampleJson);

        /// <summary>
        /// Define the controller
        /// </summary>

        /// <summary>
        /// Get all inventory items
        /// </summary>
        /// <remarks>Should return all elements as an array of InventoryItems or an empty array if there are none</remarks>
        /// <response code="200">Should return an arry of InventoryItems</response>
        [HttpGet]
        [Route("/api/inventory")]
        [ValidateModelState]
        public virtual IActionResult InventoryGet()
        { 
            return new ObjectResult(exampleList);
        }

        /// <summary>
        /// Get one InventoryItem
        /// </summary>
        /// <remarks> Returns the item for the id provided or an error</remarks>
        /// <param name="itemId"></param>
        /// <response code="200">Should return the item for the id provided</response>
        /// <response code="404">Item not found</response>
        [HttpGet]
        [Route("/api/inventory/{itemId}")]
        [ValidateModelState]
        public virtual IActionResult InventoryItemIdGet([FromRoute][Required]string itemId)
        { 
            // find the item in the list
            var example = exampleList.Find(x => x.ItemId == itemId);

            if (example == null)
                example = default(InventoryItem);

            return new ObjectResult(example);
        }
    }
}
